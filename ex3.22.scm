(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (set-front! x) (set! front-ptr x))
    (define (set-rear! x) (set! rear-ptr x))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (cond ((null? front-ptr)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr)
              (else (set-cdr! rear-ptr new-pair)
                    (set! rear-ptr new-pair)
                    front-ptr))))
    (define (delete!)
     (cond ((null? front-ptr) (error "DELETE called with an empty queue") (cons front-ptr rear-ptr))
        (else (set! front-ptr (cdr front-ptr))
              front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) insert!)
            ((eq? m 'front-queue) (car front-ptr))
            ((eq? m 'delete-queue!) (delete!))))
    dispatch))

((define (insert-queue! queue item)
  ((queue 'insert-queue!) item))
(define (delete-queue! queue)
  (queue 'delete-queue!))
(define (front-queue queue)
  (queue 'front-queue))

(define x (make-queue))
(insert-queue! x 'a)
;; => (a)
(insert-queue! x 'b)
;; => (a b)
(insert-queue! x 'c)
;; => (a b c)
(delete-queue! x)
;; => (b c)
(front-queue x)
;; => b

(define y (make-queue))
(insert-queue! y 'a)
;; => (a)
(delete-queue! y)
;; => ()
